---
- name: Creating a instance name Bastion
  hosts: localhost
  connection: local
  vars_files:
     - gce/authentication
     - gce/defaults
  vars:
     - bastion_name: "bastion"
     - bastion_machine_type: n1-standard-2
     - bastion_disk_type: pd-standard
     - bastion_disk_size: 100
     - gce_serviceaccount_directory: "{{ ansible_user_dir }}/.gce"
  tasks:
    - include: commons/setting_defaults.yaml
      tags:
         - always

    - fail: msg="redhat_subscription_username is not defined"
      when: redhat_subscription_username is not defined
      tags:
         - always

    - fail: msg="redhat_subscription_password is not defined"
      when: redhat_subscription_password is not defined
      tags:
         - always

    - name: "Creating disk: {{ bastion_name }}"
      gce_pd:
        name: "{{ bastion_name }}"
        state: present
        mode: READ_WRITE
        image: "{{ image }}"
        disk_type: "{{ bastion_disk_type }}"
        size_gb: "{{ bastion_disk_size }}"
        zone: "{{ zone }}"
        project_id: "{{ gce_project_id }}"
        credentials_file: "{{ gce_credentials_file }}"
        service_account_email: "{{ gce_service_account_email }}"

    - name: "Creating a instance named: {{ bastion_name }}"
      gce:
        instance_names: "{{ bastion_name }}"
        state: "present"
        machine_type: "{{ bastion_machine_type }}"
        zone: "{{ zone }}"
        network: "{{ network_name }}"
        subnetwork: "{{ subnetwork_name }}"
        tags: "enable-ssh"
        disk_auto_delete: True
        disks:
           - name: "{{ bastion_name }}"
             mode: READ_WRITE
        project_id: "{{ gce_project_id }}"
        credentials_file: "{{ gce_credentials_file }}"
        service_account_email: "{{ gce_service_account_email }}"
      register: instance_creation

    - name: "Getting Public IP: {{ instance_creation.instance_data[0].public_ip }}"
      set_fact: bastion_public_ip={{ instance_creation.instance_data[0].public_ip }}
      tags:
         - create

    - name: "Wait for Bastion's instance to be up: {{ bastion_public_ip }}"
      wait_for: host="{{ bastion_public_ip }}" port={{ ssh_default_image_port }}
                 delay=30  state=started
      tags:
         - create

    - name: "Adding into Host Group: bastion_group"
      add_host: groups=bastion_group hostname={{ bastion_public_ip }}
                ansible_user={{ ssh_default_image_user }} ansible_password={{ ssh_default_image_password }}
                ansible_port={{ ssh_default_image_port }}
                bastion_public_ip={{ bastion_public_ip }}
                gce_serviceaccount_directory={{ gce_serviceaccount_directory }}
      tags:
         - create

### PREPARE PREPARE PREPARE PREPARE PREPARE PREPARE PREPARE PREPARE PREPARE PREPARE PREPARE
#### PREPARE PREPARE PREPARE PREPARE PREPARE PREPARE PREPARE PREPARE PREPARE PREPARE PREPARE
- name: (PREPARE) Preparing all the hosts with a basic configuration
  hosts: bastion_group
  vars:
     subscription_name: "Employee SKU"
     subscription_type: "Virtual"
     repositories:
         - rhel-7-server-rpms
         - rhel-7-server-extras-rpms
         - rhel-7-server-ose-3.9-rpms
         - rhel-7-fast-datapath-rpms
         - rhel-7-server-rhmap-4.5-rpms
         - rhel-7-server-3scale-amp-2.0-rpms
     disk_storage: "/dev/sdb"
     disk_storage_partition: "{{ disk_storage }}1"
     disk_storage_directory: "/var/storage/repos"
     prereqs_packages:
         - vim
         - wget
         - git
         - gcc
         - net-tools
         - bind-utils
         - bridge-utils
         - bash-completion
         - yum-utils
         - createrepo
         - kexec-tools 
         - sos 
         - psacct
         - screen
         - python-pip
         - atomic-openshift-clients
         - deltarpm
         - qemu-img
         - azure-cli
  tasks:
    - name: "GCE: Check if there is content into directory {{ gce_serviceaccount_directory }}"
      local_action: stat path={{ gce_serviceaccount_directory }}
      register: gce_content
      tags:
         - gce

    - name: "GCE: Create a directory where all service account's will reside"
      file: path=/root/.gce state=directory recurse=yes
      when: gce_content.stat.exists
      become: True
      tags:
         - gce

    - name: "GCE: Copy the contents of {{ gce_serviceaccount_directory }} into Bastion's /root"
      copy: src={{ gce_serviceaccount_directory }} dest=/root directory_mode=True
      when: gce_content.stat.exists
      tags:
         - gce

    - name: Git cloning LATAM Tech Office Playbooks
      git: repo=https://github.com/latam-tech-office/{{ item }} dest=/root/{{ item }}
      with_items:
         - testdrive-openshift
         - install-openshift
         - openshift-utils
         - testdrive-cicd

    - name: Loading SSH KEY from localhost (if any)
      set_fact: ssh_key="{{ lookup('file','{{ ssh_key_file }}') }}"
      when: ssh_key_file is defined
      tags:
         - prepare

    - name: Copy a SSH Key (if does exist)
      lineinfile: dest=/root/.ssh/authorized_keys state=present create=yes line="{{ ssh_key }}"
      when: ssh_key is defined
      tags:
         - prepare

    - name: RED HAT SUBSCRIPTION{{ ':' }} Installing Red Hat's Subscription Manager
      yum: name=subscription-manager state=latest
      ignore_errors: True
      tags:
         - prepare

    - name: RED HAT SUBSCRIPTION{{ ':' }} Registering to Red Hat's Subscription Manager
      command: subscription-manager register --username={{ redhat_subscription_username }}  --password={{ redhat_subscription_password }} --force
      tags:
         - prepare

    - name: RED HAT SUBSCRIPTION:{{ ':' }} Delete a temporary existing file (if exists) /tmp/repositories_available.txt
      file: path=/tmp/repositories_available.txt state=absent
      when: redhat_subscription_pool_id is not defined
      ignore_errors: True
      tags:
         - prepare

    - name: RED HAT SUBSCRIPTION:{{ ':' }} List of all possible repositories available
      shell: subscription-manager list --available > /tmp/repositories_available.txt
      when: redhat_subscription_pool_id is not defined
      tags:
         - prepare

    - name: "RED HAT SUBSCRIPTION: Fetching information about the subscription: {{ subscription_name }} type: {{ subscription_type }}"
      command: "sed -n '/Subscription Name:   {{ subscription_name }}/{p; :loop n; p; /System Type:         {{ subscription_type }}/q; b loop}' /tmp/repositories_available.txt"
      register: subscription_info
      when: redhat_subscription_pool_id is not defined
      tags: 
         - prepare

    - name: RED HAT SUBSCRIPTION:{{ ':' }} Fetching Pool ID in this subscription
      set_fact: redhat_subscription_pool_id={{ subscription_info.stdout | regex_replace("(?s)^.*?Pool ID:\s+", "") |
                                                                    regex_replace("(?s)\\n.*$","") }}
      when: redhat_subscription_pool_id is not defined
      tags:
         - prepare

    - name: RED HAT SUBSCRIPTION{{ ':' }} Attaching a Pool ID{{ ':' }} {{ redhat_subscription_pool_id }}
      command: subscription-manager attach --pool={{ redhat_subscription_pool_id }}
      tags:
         - prepare

    - name: RED HAT SUBSCRIPTION{{ ':' }} Disable all Repositories
      command: subscription-manager repos --disable="*"
      tags:
         - prepare

    - name: RED HAT SUBSCRIPTION{{ ':' }} Enabling Repository
      command: subscription-manager repos --enable={{ item }}
      with_items: "{{ repositories }}"
      tags:
         - prepare

    - name: Adding Microsoft Key Repository
      rpm_key: key=https://packages.microsoft.com/keys/microsoft.asc state=present 
               validate_certs=False
      tags:
         - prepare

    - name: Adding Microsoft Azure CLI Repository
      yum_repository: name="azure-cli" description="Microsoft Azure CLI command line" 
                      baseurl="https://packages.microsoft.com/yumrepos/azure-cli" 
                      enabled=True 
                      gpgcheck=True gpgkey=https://packages.microsoft.com/keys/microsoft.asc 
                      file=azure-cli
      tags:
         - prepare

    - name: Adding a EPEL Repository
      yum_repository: name="EPEL" description="EPEL Repository for Python PIP"
                      baseurl="http://mirror.globo.com/epel/7/x86_64/"
                      enabled=True gpgcheck=False
      tags:
         - prepare

    - name: Updating the entire host
      yum: name="*" state=latest
      tags:
         - prepare

    - name: Installing all the necessary applications
      yum: name="{{ item }}" state=latest
      with_items: "{{ prereqs_packages }}"
      tags:
         - prepare

    - name: Installing Ansible from EPEL Repository (along with Azure modules)
      command: pip install ansible[azure]
      tags:
         - azure

    - name: Installing Apache LibCloud (needed for GCE)
      command: pip install apache-libcloud
      tags:
         - gce

    - name: "JDK: Creating all the necessary directory structure"
      file: path={{ ansible_user_dir }}/java/jdk/  state=directory
      tags:
         - java
   
    - name: "JDK: Download JDK 8"
      uri: url=http://download.oracle.com/otn-pub/java/jdk/8u191-b12/2787e4a523244c269598db4e85c51e0c/jdk-8u191-linux-x64.tar.gz
           headers={"Cookie":"oraclelicense=accept-securebackup-cookie"} method=GET
           creates=True dest={{ ansible_user_dir }}/java/jdk/jdk-8u191-linux-x64.tar.gz
      tags:
         - java

    - name: "JDK: Extracting JDK 8"
      unarchive: src={{ ansible_user_dir }}/java/jdk/jdk-8u191-linux-x64.tar.gz
                 dest={{ ansible_user_dir }}/java/jdk
                 remote_src=True
      tags:
         - java

    - name: "JDK: Symbolic link do JDK 8"
      file: src={{ ansible_user_dir }}/java/jdk/jdk1.8.0_191 state=link dest={{ ansible_user_dir }}/java/jdk/latest
      tags:
         - java

    - name: "JDK: Deleting original file"
      file: path={{ ansible_user_dir }}/java/jdk/jdk-8u191-linux-x64.tar.gz state=absent
      tags:
         - java

    - name: "JDK: Making JDK 8 wide available by defining {{ ansible_user_dir }}/.bashrc"
      lineinfile: path={{ ansible_user_dir }}/.bashrc   regexp="^JAVA_HOME="
                  line="JAVA_HOME={{ ansible_user_dir }}/java/jdk/latest" state=present insertafter=EOF
      tags:
         - java
         - bash_rc

    - name: "MAVEN: Create directory for Maven"
      file: path={{ ansible_user_dir }}/java/tools/apache/maven/
            state=directory
      tags: 
        - java
        - maven

    - name: "MAVEN: Download Maven"
      uri: url=http://mirror.nbtelecom.com.br/apache/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.tar.gz
           method=GET creates=True dest={{ ansible_user_dir }}/java/tools/apache/maven/apache-maven-3.5.4-bin.tar.gz
      tags:
         - java
         - maven

    - name: "MAVEN: Extracting Maven"
      unarchive: src={{ ansible_user_dir }}/java/tools/apache/maven/apache-maven-3.5.4-bin.tar.gz 
                 dest={{ ansible_user_dir }}/java/tools/apache/maven/
                 remote_src=True
      tags:
         - java
         - maven

    - name: "MAVEN: Symbolic link to Maven"
      file: src={{ ansible_user_dir }}/java/tools/apache/maven/apache-maven-3.5.4 state=link 
            dest={{ ansible_user_dir }}/java/tools/apache/maven/latest
      tags:
         - java
         - maven

    - name: "MAVEN: Deleting original file"
      file: path={{ ansible_user_dir }}/java/tools/apache/maven/apache-maven-3.5.4-bin.tar.gz state=absent
      tags:
         - java       
         - maven

    - name: "MAVEN: Making Maven wide available by defining {{ ansible_user_dir }}/.bashrc"
      lineinfile: path={{ ansible_user_dir }}/.bashrc   regexp="^MAVEN_HOME="
                  line="MAVEN_HOME={{ ansible_user_dir }}/java/tools/apache/maven/latest" state=present insertafter=EOF
      tags:
         - java
         - maven
         - bash_rc

    - name: "WILDFLY: Create directory for WildFly"
      file: path={{ ansible_user_dir }}/java/server/as/redhat/wildfly
            state=directory
      tags:
         - java
         - wildfly

    - name: "WILDFLY: Download WildFly"
      uri: url=http://download.jboss.org/wildfly/12.0.0.Final/wildfly-12.0.0.Final.tar.gz
           method=GET creates=True dest={{ ansible_user_dir }}/java/server/as/redhat/wildfly/wildfly-12.0.0.Final.tar.gz
      tags:
         - java
         - wildfly

    - name: "WILDFLY: Extracting WildFly"
      unarchive: src={{ ansible_user_dir }}/java/server/as/redhat/wildfly/wildfly-12.0.0.Final.tar.gz
                 dest={{ ansible_user_dir }}/java/server/as/redhat/wildfly/
                 remote_src=True
      tags:
         - java
         - wildfly

    - name: "WILDFLY: Symbolic link to WildFly"
      file: src={{ ansible_user_dir }}/java/server/as/redhat/wildfly/wildfly-12.0.0.Final
            dest={{ ansible_user_dir }}/java/server/as/redhat/wildfly/latest
            state=link
      tags:
         - java
         - wildfly

    - name: "WILDFLY: Deleting original file"
      file: path={{ ansible_user_dir }}/java/server/as/redhat/wildfly/wildfly-12.0.0.Final.tar.gz
            state=absent
      tags:
         - java
         - wildfly

    - name: "WILDFLY: Making WildFly wide available by defining {{ ansible_user_dir }}/.bashrc"
      lineinfile: path={{ ansible_user_dir }}/.bashrc   regexp="^JBOSS_HOME="
                  line="JBOSS_HOME={{ ansible_user_dir }}/java/server/as/redhat/wildfly/latest" state=present insertafter=EOF
      tags:
         - java
         - wildfly

    - name: "BASHRC: Adding all the necessary applications"
      lineinfile: path={{ ansible_user_dir }}/.bashrc regexp="^PATH=" state=present
                  line="PATH=${PATH}:${JAVA_HOME}/bin:${MAVEN_HOME}/bin:${JBOSS_HOME}/bin"
      tags:
         - java
         - bash_rc

    - name: "BASHRC: Exporting all the necessary applications"
      lineinfile: path={{ ansible_user_dir }}/.bashrc line="export PATH JAVA_HOME MAVEN_HOME JBOSS_HOME"
                  state=present insertafter=EOF
      tags:
         - java
         - bash_rc

    - name: "Informing Bastion IP: {{ bastion_public_ip }}"
      debug: msg="Bastion is Ready{{ ':' }} ssh root@{{ bastion_public_ip }}"
